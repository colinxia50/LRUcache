// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	FindAllCacheNode(ctx context.Context, in *RegCacheRequest, opts ...grpc.CallOption) (*NodesAdders, error)
	RegCacheNode(ctx context.Context, in *RegCacheRequest, opts ...grpc.CallOption) (*RegCacheResponse, error)
	GetCache(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Cache, error)
	SetCache(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*Key, error)
	Remove(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Key, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) FindAllCacheNode(ctx context.Context, in *RegCacheRequest, opts ...grpc.CallOption) (*NodesAdders, error) {
	out := new(NodesAdders)
	err := c.cc.Invoke(ctx, "/CacheService/findAllCacheNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) RegCacheNode(ctx context.Context, in *RegCacheRequest, opts ...grpc.CallOption) (*RegCacheResponse, error) {
	out := new(RegCacheResponse)
	err := c.cc.Invoke(ctx, "/CacheService/regCacheNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetCache(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Cache, error) {
	out := new(Cache)
	err := c.cc.Invoke(ctx, "/CacheService/getCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) SetCache(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/CacheService/setCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) Remove(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/CacheService/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility
type CacheServiceServer interface {
	FindAllCacheNode(context.Context, *RegCacheRequest) (*NodesAdders, error)
	RegCacheNode(context.Context, *RegCacheRequest) (*RegCacheResponse, error)
	GetCache(context.Context, *Key) (*Cache, error)
	SetCache(context.Context, *Cache) (*Key, error)
	Remove(context.Context, *Key) (*Key, error)
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (UnimplementedCacheServiceServer) FindAllCacheNode(context.Context, *RegCacheRequest) (*NodesAdders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllCacheNode not implemented")
}
func (UnimplementedCacheServiceServer) RegCacheNode(context.Context, *RegCacheRequest) (*RegCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegCacheNode not implemented")
}
func (UnimplementedCacheServiceServer) GetCache(context.Context, *Key) (*Cache, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCache not implemented")
}
func (UnimplementedCacheServiceServer) SetCache(context.Context, *Cache) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCache not implemented")
}
func (UnimplementedCacheServiceServer) Remove(context.Context, *Key) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s grpc.ServiceRegistrar, srv CacheServiceServer) {
	s.RegisterService(&CacheService_ServiceDesc, srv)
}

func _CacheService_FindAllCacheNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).FindAllCacheNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/findAllCacheNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).FindAllCacheNode(ctx, req.(*RegCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_RegCacheNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).RegCacheNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/regCacheNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).RegCacheNode(ctx, req.(*RegCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/getCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetCache(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_SetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cache)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/setCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetCache(ctx, req.(*Cache))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Remove(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheService_ServiceDesc is the grpc.ServiceDesc for CacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllCacheNode",
			Handler:    _CacheService_FindAllCacheNode_Handler,
		},
		{
			MethodName: "regCacheNode",
			Handler:    _CacheService_RegCacheNode_Handler,
		},
		{
			MethodName: "getCache",
			Handler:    _CacheService_GetCache_Handler,
		},
		{
			MethodName: "setCache",
			Handler:    _CacheService_SetCache_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _CacheService_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache_service.proto",
}
